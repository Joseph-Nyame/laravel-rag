<?php

namespace App\Services;

use App\Models\Agent;
use App\Models\Structure;
use Illuminate\Support\Facades\Log;
use OpenAI;

class EntityExtractionClass
{
    protected $client;

    public function __construct()
    {
        $this->client = OpenAI::client(env('OPENAI_API_KEY'));
    }

    public function extract(string $command, Agent $agent): array
    {
        try {
            $structure = Structure::where('agent_id', $agent->id)->first();
            if (!$structure) {
                throw new \Exception('No structure defined for agent');
            }

            $specifics = $structure->schema['specifics'] ?? [];
            $autoGeneratedFields = array_keys(array_filter($specifics, fn($spec) => $spec['manual'] ?? false));

            $prompt = "Extract key-value pairs from the command: '$command' for agent '{$agent->name}'. " .
                      "Return a JSON object with the extracted data. " .
                      "Only include fields explicitly mentioned in the command (e.g., name, price). " .
                      "Do not infer or generate fields that are auto-generated by the system, such as: " .
                      implode(', ', $autoGeneratedFields) . ", unless explicitly provided in the command.";

            $response = $this->client->chat()->create([
                'model' => 'gpt-4o-mini',
                'messages' => [
                    ['role' => 'system', 'content' => 'You are an NLP assistant extracting data from commands.'],
                    ['role' => 'user', 'content' => $prompt],
                ],
            ]);

            // Clean response to remove Markdown
            $content = trim($response->choices[0]->message->content);
            $content = preg_replace('/^```json\n|\n```$/m', '', $content);
            $content = trim($content);

            $data = json_decode($content, true);
            if (!is_array($data)) {
                Log::warning('Invalid JSON in entity extraction response', [
                    'command' => $command,
                    'agent_id' => $agent->id,
                    'raw_response' => $response->choices[0]->message->content,
                    'cleaned_response' => $content,
                ]);
                $data = [];
            }

            Log::info('Entity extraction successful', [
                'command' => $command,
                'agent_id' => $agent->id,
                'data' => $data,
            ]);

            return $data;
        } catch (\Exception $e) {
            Log::error('Entity extraction failed', [
                'command' => $command,
                'agent_id' => $agent->id,
                'error' => $e->getMessage(),
            ]);
            throw $e;
        }
    }
}